{"remainingRequest":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/youngseolee/Desktop/squid_game/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youngseolee/Desktop/squid_game/src/components/game_components/Puzzle_game.vue?vue&type=template&id=256b6172&scoped=true&","dependencies":[{"path":"/Users/youngseolee/Desktop/squid_game/src/components/game_components/Puzzle_game.vue","mtime":1638771768000},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/cache-loader/dist/cjs.js","mtime":1660627976377},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1660627978859},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/cache-loader/dist/cjs.js","mtime":1660627976377},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/index.js","mtime":1660627977937}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}