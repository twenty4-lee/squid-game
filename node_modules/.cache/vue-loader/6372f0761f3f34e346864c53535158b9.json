{"remainingRequest":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youngseolee/Desktop/squid_game/src/components/game_components/Puzzle_game.vue?vue&type=style&index=0&id=256b6172&scoped=true&lang=css&","dependencies":[{"path":"/Users/youngseolee/Desktop/squid_game/src/components/game_components/Puzzle_game.vue","mtime":1638771768000},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/css-loader/dist/cjs.js","mtime":1660627977113},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1660627978742},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/postcss-loader/src/index.js","mtime":1660627977525},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/cache-loader/dist/cjs.js","mtime":1660627976377},{"path":"/Users/youngseolee/Desktop/squid_game/node_modules/vue-loader/lib/index.js","mtime":1660627977937}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICIuL2dhbWVDc3MvUHV6emxlX2dhbWUuY3NzIjsNCg=="},{"version":3,"sources":["Puzzle_game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8aA","file":"Puzzle_game.vue","sourceRoot":"src/components/game_components","sourcesContent":["<template>\r\n\t<div id=\"puzzleEntire\">\r\n\t\t<div id=\"board\">\r\n\t\t\t<div id=\"game-group\">\r\n\t\t\t\t<form @click=\"handleClick\" :aria-label=\"`${howManyCorrect} of ${ratioSquared} tiles correctly placed.`\" :class=\"{dim: dimTiles, invertNumbers: invertNumbers, showNumbers: showNumbers}\">\r\n\t\t\t\t\t<transition-group name=\"slide\" id=\"innerBoard\" tag=\"div\" :style=\"{gridTemplateColumns: `repeat(${ratio}, 1fr)`, gridTemplateColumns: `repeat(${ratio}, 1fr)`}\">\r\n\t\t\t\t\t\t<button \r\n\t\t\t\t\t\t\tv-for=\"(tile, index) in tiles\" \r\n\t\t\t\t\t\t\t:key=\"tile.val\" @keyup.prevent=\"handleArrow\"\r\n\t\t\t\t\t\t\t:index=\"index\" :ref=\"!tile.val && 'empty'\" \r\n\t\t\t\t\t\t\t:disabled=\"!tile.isPossibleMove && tile.val > 0\"\r\n\t\t\t\t\t\t\tclass=\"tile\"\r\n\t\t\t\t\t\t\t:class=\"{ correct: isTileCorrect(tile.val,index), possible_move: tile.isPossibleMove }\" \r\n\t\t\t\t\t\t\t:aria-label=\"getAccessibleTilePosition(tile.val, index)\"\r\n\t\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\t\tbackgroundPosition: getBackgroundPosition(tile.val),\r\n\t\t\t\t\t\t\t\tbackgroundSize: `calc(100% * ${ratio}) calc(100% * ${ratio})`\r\n\t\t\t\t\t\t\t}\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span v-if=\"tile.val\">{{showNumbers ? tile.val : ''}}</span>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</transition-group>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<transition name=\"fade\">\r\n\t\t\t\t\t\t<div v-if=\"!gameStarted\" class=\"loader\"><p>Randomizing solvable puzzle<span class=\"dot\">.</span><span class=\"dot\">.</span><span class=\"dot\">.</span></p></div>\r\n\t\t\t\t\t</transition>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<p id=\"timer\">                \r\n\t\t\t\t\t<strong>Time : {{time}}</strong>\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t<p id=\"counter\">\r\n\t\t\t\t\t<span id=\"progress-bar\" :style=\"{width: howManyCorrect / ratioSquared * 100 + '%'}\"></span>\r\n\t\t\t\t\t<strong>{{howManyCorrect}} / {{ratioSquared}}</strong>\r\n\t\t\t\t</p>\r\n\t\t\t\t\r\n\t\t\t\t<p aria-hidden=\"true\">Play with üñ±Ô∏è, üëÜ, or ‚å®Ô∏è ‚¨ÜÔ∏è ‚û°Ô∏è ‚¨áÔ∏è ‚¨ÖÔ∏è</p>\r\n\t\t\t\t<p class=\"sr\">Play with mouse, touch, or keyboard.</p>\r\n\t\t\t</div>\r\n\t\t\r\n\t\t\r\n\t\t\t<aside id=\"options\">\t\t\t\r\n\t\t\t\t<div id=\"custom-image\">\r\n\t\t\t\t\t<label for=\"custom-image-input\">Custom Image:</label>\r\n\t\t\t\t\t<select v-model=\"imageSelect\" name=\"imageSelect\" id=\"imageSelect\">\r\n\t\t\t\t\t\t<option value=\"../gameAssets/Puzzle/KKANBU_rabbit1.jpeg\">KKANBU_rabbit1</option>\r\n\t\t\t\t\t\t<option value=\"../gameAssets/Puzzle/KKANBU_rabbit2.jpeg\">KKANBU_rabbit2</option>\r\n\t\t\t\t\t\t<option value=\"../gameAssets/Puzzle/KKANBU_rabbit3.jpeg\">KKANBU_rabbit3</option>\r\n\t\t\t\t\t\t<option value=\"../gameAssets/Puzzle/KKANBU_rabbit4.jpeg\">KKANBU_rabbit4</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input v-if=\"imageSelect === `custom`\" @click=\"highlightInput\" v-model=\"customImage\" id=\"custom-image-input\" type=\"text\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div v-if=\"showSolution\" id=\"solution\" :style=\"{backgroundImage: imageSelect == 'custom' ? `url(${customImage})` : `url(${imageSelect})`}\">\r\n\t\t\t\t\t<span>[Solution]</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"options-group\">\r\n\t\t\t\t\t<input v-model=\"showSolution\" type=\"checkbox\" id=\"show-solution\">\r\n\t\t\t\t\t<label for=\"show-solution\">Show solution</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"options-group\">\r\n\t\t\t\t\t<input v-model=\"dimTiles\" type=\"checkbox\" id=\"highlight-tiles\">\r\n\t\t\t\t\t<label for=\"highlight-tiles\">Dim incorrect tiles</label>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div class=\"options-group\">\r\n\t\t\t\t\t<input v-model=\"showNumbers\" type=\"checkbox\" id=\"show-numbers\">\r\n\t\t\t\t\t<label for=\"show-numbers\">Show numbers</label>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<transition name=\"fade\">\r\n\t\t\t\t\t\t<div v-if=\"showNumbers\">\r\n\t\t\t\t\t\t\t<input v-model=\"invertNumbers\" type=\"checkbox\" id=\"invert-numbers\">\r\n\t\t\t\t\t\t\t<label for=\"invert-numbers\">Invert number colors</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</transition>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<button @click=\"randomizeBoard\" class=\"reshuffle\">Re-Shuffle</button>\r\n\t\t\t</aside>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n<script>\r\nimport * as rMod from \"../ranking_components/ranking\";\r\n\r\n    export default{\t\t\t\r\n\t\t\tdata() {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tratio: 4, //üëà A little buggy at some sizes; works best at 4, but ¬Ø\\_(„ÉÑ)_/¬Ø\r\n\t\t\t\t\ttiles: [],\r\n\t\t\t\t\tsolution: [],\r\n\t\t\t\t\tillegalMoves: [],\r\n\t\t\t\t\tinvertSwipe: false,\r\n\t\t\t\t\tshowNumbers: false,\r\n\t\t\t\t\tinvertNumbers: false,\r\n\t\t\t\t\tdimTiles: false,\r\n\t\t\t\t\timageSelect: '../gameAssets/Puzzle/KKANBU_rabbit1.jpeg',\r\n\t\t\t\t\tcustomImage: './gameAssets/Puzzle/KKANBU_rabbit4.jpeg',\r\n\t\t\t\t\tshowSolution: true,\r\n\t\t\t\t\tgameStarted: false,\r\n\t\t\t\t\ttime: 0,\r\n\t\t\t\t\tisRunning: false,\r\n\t\t\t\t\tinterval: null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\twatch: {\r\n\t\t\t\ttiles(newTiles) {\r\n\t\t\t\t\tif (this.gameStarted) {\r\n\t\t\t\t\t\t//We need nextTick here or the board will render legal moves based on where the empty tile *used to* be\r\n\t\t\t\t\t\tthis.$nextTick(() => {\r\n\t\t\t\t\t\t\tconst legalMoves = this.getLegalMoves();\r\n\t\t\t\t\t\t\tnewTiles.forEach((tile, index) => {\r\n\t\t\t\t\t\t\t\tnewTiles[index].isPossibleMove = legalMoves.includes(index) ? true : false;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tcustomImage() {\r\n\t\t\t\t\tdocument.querySelector('#puzzleEntire').style.setProperty('--backgroundImage', `url(${this.customImage})`);\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\timageSelect() {\r\n\t\t\t\t\tdocument.querySelector('#puzzleEntire').style.setProperty('--backgroundImage', this.imageSelect === 'custom' ? `url(${this.customImage})` : `url(${this.imageSelect})`);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tcreated() { //Generate a board, an answer, and a list of illegal moves based on this.ratio\r\n\t\t\t\tconst max = this.ratioSquared;\r\n\t\t\t\tfor(let i=0; i < max; i++) {\r\n\t\t\t\t\tthis.tiles.push(i === (max -1) ? { val: '', isPossibleMove: false } : { val: i+1, isPossibleMove: false } );\r\n\t\t\t\t\tthis.solution.push(i === (max -1) ? { val: '', isPossibleMove: false } : { val: i+1, isPossibleMove: false } );\r\n\t\t\t\t\tif (i % this.ratio == 0) {\r\n\t\t\t\t\t\tthis.illegalMoves.push(i + (i-1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tmounted() { //Set styles for any board size properly and randomize it to start\t\t\r\n\t\t\t\t//Set up swipe\r\n                \r\n\t\t\t\tconst innerBoard = document.getElementById('innerBoard');\r\n\t\t\t\tconst touchBoard = new Hammer(innerBoard);\r\n\t\t\t\t\r\n\t\t\t\ttouchBoard.get('swipe').set({\r\n\t\t\t\tdirection: Hammer.DIRECTION_ALL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\ttouchBoard.on('swipeup swipedown swipeleft swiperight', (e) => {\r\n\t\t\t\t\tthis.handleClick(e);\r\n\t\t\t\t});                \r\n\t\t\t\t\r\n\t\t\t\t//Set the ratio and background image in CSS\r\n\t\t\t\tdocument.querySelector('#puzzleEntire').style.setProperty('--ratio', this.ratio);\r\n\t\t\t\tdocument.querySelector('#puzzleEntire').style.setProperty('--backgroundImage', this.imageSelect === 'custom' ? `url(${customImage})` : `url(${this.imageSelect})`);\r\n\t\t\t\t\r\n\t\t\t\t//Prevent arrow keys from scrolling\r\n\t\t\t\tinnerBoard.addEventListener(\"keydown\", function(e) {\r\n\t\t\t\t// space and arrow keys\r\n\t\t\t\t\tif ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, false);\r\n\t\t\t\t\r\n\t\t\t\tthis.randomizeBoard();\r\n                \r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tcomputed: {\r\n\t\t\t\trandomMoveQty() {\r\n\t\t\t\t\treturn (this.ratio * 75);\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\thowManyCorrect() {\r\n\t\t\t\t\tconst correctlyPlacedTiles = this.tiles.filter((tile, index) => {\r\n\t\t\t\t\t\treturn (Number(tile.val) == Number(index + 1) || Number(index + 1) == this.ratioSquared && !tile.val);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (correctlyPlacedTiles.length === this.ratioSquared && this.gameStarted === true) {\r\n\t\t\t\t\t\tsetTimeout(()=> { \r\n\t\t\t\t\t\t\talert('YOU WIN! Click the \"re-shuffle\" button to start a new game (or adjust the ratio to get crazy)!' + ' Time : ' + this.time)\r\n\t\t\t\t\t\t\tthis.stopTimer()\r\n\t\t\t\t\t\t\t// Ïó¨Í∏∞ÏÑú Ï†êÏàò Í∏∞Î°ù\r\n\t\t\t\t\t\t}, 200);\r\n\t\t\t\t\t\tif(this.fnGetAuthStatus) {\r\n\t\t\t\t\t\t\trMod.recordNewRank('puzzle_game', this.fnGetUser.id, this.fnGetUser.name, this.time);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trMod.recordCurrentScore(this.time);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trMod.detectGame(true, false, false);\r\n\t\t\t\t\t\tthis.$router.push('/rankingPage');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn correctlyPlacedTiles.length;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tratioSquared() {\r\n\t\t\t\t\treturn this.ratio * this.ratio;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfnGetAuthStatus() {\r\n\t\t\t\t\treturn this.$store.getters.fnGetAuthStatus\r\n\t\t\t\t},\r\n\t\t\t\tfnGetUser() {\r\n\t\t\t\t\tlet oUserInfo = this.$store.getters.fnGetUser;\r\n\t\t\t\t\treturn oUserInfo;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\r\n\t\t\tmethods: {\r\n\t\t\t\tisTileCorrect(val, index) {\r\n\t\t\t\t\treturn val - 1 == index;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\thighlightInput(e) {\r\n\t\t\t\t\te.target.select();\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tgetBackgroundPosition(val) {\r\n\t\t\t\t\treturn val ? `${(100 / (this.ratio - 1)) * (val -1)}% ${Math.floor((val - 1) / this.ratio) * (100 / (this.ratio - 1))}%` : '5% 5%';\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tmoveIsNotTheSameTile(a, b) {\r\n\t\t\t\t\treturn a != b; //Can't shuffle a tile with itself\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tmoveIsInBounds(a, b) {\r\n\t\t\t\t\t//Don't let the user try to move a tile outside the board\r\n\t\t\t\t\treturn (a >= 0 && b >= 0 && a < this.ratioSquared && b < this.ratioSquared);\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tmoveIsAdjacentTile(a, b) {\r\n\t\t\t\t\t//Tiles are either next to each other or above/below each other\r\n\t\t\t\t\treturn (a + b === 1 || a - b === 1 || b - a === 1) ||\r\n\t\t\t\t\t//‚Ä¶And we avoid the loophole where it LOOKS like the move is valid even though it's not because the two indexes are small enough they add up to the board size\r\n\t\t\t\t\t((a + b == this.ratio && a - b >= this.ratio ) || a - b == this.ratio || b - a == this.ratio)\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tmoveIsNotCrossRowHorizontal(a, b) {\r\n\t\t\t\t\t//Eliminates \"adjacent\" values on separate rows, like 4 -> 5 on a 4 √ó 4 grid\r\n\t\t\t\t\treturn ( (a - b === 1 || b - a === 1) && !this.illegalMoves.includes(a + b) ) || (a - b !== 1 && b - a !== 1)\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tisValidMove(a, b) {\r\n\t\t\t\t\ta = Number(a);\r\n\t\t\t\t\tb = Number(b);\r\n\t\t\t\t\tif (this.moveIsNotTheSameTile(a, b) && this.moveIsInBounds(a, b) && this.moveIsAdjacentTile(a, b) && this.moveIsNotCrossRowHorizontal(a, b)) {\r\n\t\t\t\t\t\treturn true;\t\r\n\t\t\t\t\t} \r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\trandomizeBoard() {\r\n\t\t\t\t\tlet randomized = this.randomMoveQty;\r\n\t\t\t\t\tlet shuffleSpeed = 10;\r\n\t\t\t\t\tthis.gameStarted = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst randomMove = () => {\r\n\t\t\t\t\t\tif (randomized > 0) {\r\n\t\t\t\t\t\t\tconst a = this.getEmptyTileIndex();\t\t\t\r\n\t\t\t\t\t\t\tconst b = this.generateRandomMove(a);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (!this.isValidMove(a, b)) {\r\n\t\t\t\t\t\t\t\trandomMove();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.swap(a, b);\r\n\t\t\t\t\t\t\t\trandomized--;\r\n\t\t\t\t\t\t\t\tif (randomized > 0) {\r\n\t\t\t\t\t\t\t\t\tthis.$nextTick(() => randomMove());\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.gameStarted = true;\r\n\t\t\t\t\t\t\t\t\tthis.focusEmptyTile();\r\n\t\t\t\t\t\t\t\t\tdocument.querySelector('#puzzleEntire').style.setProperty('--transition', 'transform .15s ease-out');\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\trandomMove();\r\n\t\t\t\t\t}, 100);\r\n\r\n\t\t\t\t\tthis.resetTimer()\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tgetLegalMoves() {\r\n\t\t\t\t\tconst emptyIndex = this.getEmptyTileIndex();\r\n\t\t\t\t\tconst possibleMoves = [emptyIndex - 1, emptyIndex + 1, emptyIndex - this.ratio, emptyIndex + this.ratio];\r\n\t\t\t\t\tconst legalMoves = possibleMoves.filter(index => {\r\n\t\t\t\t\t\treturn this.isValidMove(index, emptyIndex);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn legalMoves;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tisPossibleMove(index) {\r\n\t\t\t\t\treturn this.getLegalMoves().includes(index) ? 'possible-move' : '';\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tgenerateRandomMove(x) {\r\n\t\t\t\t\tx = Number(x);\r\n\t\t\t\t\tconst move = Math.floor(Math.random() * this.ratio);\r\n\t\t\t\t\tif (move === 0) {\r\n\t\t\t\t\t\treturn x - 1;\r\n\t\t\t\t\t} else if (move === 1) {\r\n\t\t\t\t\t\treturn x + 1;\r\n\t\t\t\t\t} else if (move === 2) {\r\n\t\t\t\t\t\treturn x - this.ratio;\r\n\t\t\t\t\t} else if (move === 3) {\r\n\t\t\t\t\t\treturn x + this.ratio;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tgetAccessibleTilePosition(val, index) {\r\n\t\t\t\t\tlet tileIdentifier = val ? `Tile ${val}` : `Empty tile`;\r\n\t\t\t\t\treturn `${tileIdentifier} ${val -1 === index ? 'correctly placed' : ''} in position ${index + 1}: row ${Math.floor(index / this.ratio) +1}, column ${index % this.ratio +1}`\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tfocusEmptyTile() {\r\n\t\t\t\t\tthis.$nextTick(() => this.$refs.empty[0].focus());\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tgetEmptyTileIndex() {\r\n\t\t\t\t\treturn this.$refs.empty ? Number(this.$refs.empty[0].getAttribute('index')) : this.ratioSquared -1;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\thandleArrow(e) {\t\t\t\t\t\r\n\t\t\t\t\tconst emptyIndex = this.getEmptyTileIndex();\r\n\t\t\t\t\tlet clickedIndex;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (e.which === 37) {\r\n\t\t\t\t\t\tclickedIndex = emptyIndex - 1;\r\n\t\t\t\t\t} else if (e.which === 38) {\r\n\t\t\t\t\t\tclickedIndex = emptyIndex - this.ratio;\r\n\t\t\t\t\t} else if (e.which === 39) {\r\n\t\t\t\t\t\tclickedIndex = emptyIndex + 1;\r\n\t\t\t\t\t} else if (e.which === 40) {\r\n\t\t\t\t\t\tclickedIndex = emptyIndex + this.ratio;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.isValidMove(emptyIndex, clickedIndex)) {\r\n\t\t\t\t\t\tthis.swap(emptyIndex, clickedIndex);\t\r\n\t\t\t\t\t\tthis.gameStarted && this.focusEmptyTile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.toggleTimer()\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\thandleClick(e) {\t\t\t\t\t\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t//Get the empty tile and the clicked tile, then both of their index values\r\n\t\t\t\t\tconst emptyIndex = this.getEmptyTileIndex();\r\n\t\t\t\t\tconst wasSwipe = (e.type && e.type.includes('swipe'));\r\n\t\t\t\t\tlet clicked;\r\n\t\t\t\t\tlet clickedIndex;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (wasSwipe) {\r\n\t\t\t\t\t\tif (e.type === 'swiperight') {\r\n\t\t\t\t\t\t\tclickedIndex = this.invertSwipe ? emptyIndex + 1 : emptyIndex - 1;\r\n\t\t\t\t\t\t} else if (e.type === 'swipeleft') {\r\n\t\t\t\t\t\t\tclickedIndex = this.invertSwipe ? emptyIndex - 1 : emptyIndex + 1;\r\n\t\t\t\t\t\t} else if (e.type === 'swipeup') {\r\n\t\t\t\t\t\t\tclickedIndex = this.invertSwipe ? emptyIndex - this.ratio : emptyIndex + this.ratio;\r\n\t\t\t\t\t\t} else if (e.type === 'swipedown') {\r\n\t\t\t\t\t\t\tclickedIndex = this.invertSwipe ? emptyIndex + this.ratio : emptyIndex - this.ratio;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclicked = e.target;\r\n\t\t\t\t\t\tclickedIndex = Number(clicked.getAttribute('index'));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!(emptyIndex || clickedIndex)) {\r\n\t\t\t\t\t\treturn; //If we don't have a valid index value for both the empty tile and the clicked tile, exit early\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//Check if the clicked move is valid\r\n\t\t\t\t\tif (this.isValidMove(emptyIndex, clickedIndex)) {\r\n\t\t\t\t\t\t//Shuffle the two tiles if it's a valid move\r\n\t\t\t\t\t\tthis.swap(emptyIndex, clickedIndex);\r\n\t\t\t\t\t\t//Focus the empty tile if it was a click or keyboard move\r\n\t\t\t\t\t\tthis.gameStarted && !wasSwipe && this.focusEmptyTile();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn; //If it's not a valid move, do nothing\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.toggleTimer()\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tswap(clickedIndex, emptyIndex) {\r\n\t\t\t\t\tconst a = this.tiles[clickedIndex];\r\n\t\t\t\t\tconst b = this.tiles[emptyIndex];\r\n\t\t\t\t\tthis.$set(this.tiles, clickedIndex, b);\r\n\t\t\t\t\tthis.$set(this.tiles, emptyIndex, a);\r\n\t\t\t\t},\r\n\r\n\t\t\t\ttoggleTimer() {\t\t\t\t\t\r\n\t\t\t\t\tif (this.isRunning) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.interval = setInterval(this.incrementTime, 1000);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\tthis.isRunning = !this.isRunning\r\n\t\t\t\t},\r\n\r\n\t\t\t\tincrementTime() {\r\n\t\t\t\t\tthis.time = parseInt(this.time) + 1;\r\n\t\t\t\t},\t\t\t\t\r\n\r\n\t\t\t\tresetTimer() {\r\n\t\t\t\t\tclearInterval(this.interval);\r\n\t\t\t\t\tthis.time = 0;\r\n\t\t\t\t\tthis.isRunning = false\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstopTimer() {\r\n\t\t\t\t\tclearInterval(this.interval);        \t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n        \r\n    };\r\n</script>\r\n<style scoped>\r\n@import \"./gameCss/Puzzle_game.css\";\r\n</style>"]}]}